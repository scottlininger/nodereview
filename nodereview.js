// Copyright 2015 Bitsbox. All rights reserved.

/**
 * @fileoverview  Sends an email code review with an attached HTML file. The
 *     HTML file contains a side-by-side diff view of the current git branch.
 *
 *     Note that you'll need to install the emailjs and prompt npm modules.
 *     These command install them globally (recommended).
 *
 *     > sudo npm install -g emailjs
 *     > sudo npm install -g prompt
 *     > sudo npm install -g colors
 */

/**
 * Require some handy modules.
 */
var colors = require('colors');
var emailjs = require('emailjs');
var exec = require('child_process').exec;
var fs = require('fs');
var prompt = require('prompt');

/**
 * This reads in the nodereview.html file as a string.
 * TODO(scott): At the moment, I'm not using this, but I think I
 *     will in a future change, to make the html that gets
 *     attached to be prettier.
require.extensions['.html'] = function (module, filename) {
  module.exports = fs.readFileSync(filename, 'utf8');
};
var htmlSource = require('./nodereview.html');
*/

/**
 * This is the URL to the "review" URL, which is a file out on the
 * web someplace that can run javascript. It looks for a URL encoded
 * "git show" text stream that comes appended after the URL's hash.
 */
var REVIEW_LINK_URL = 'http://codepops.com/nodereview/nodereview.html';


/**
 * Which files to exclude from code reviews, since they're autogenerated.
 */
var isAutoGeneratedFile = {
  'www/library-compiled.js': true,
  'www/compiled.js': true,
  'www/lib/songs.js': true,
  'www/lib/sounds.js': true,
  'www/lib/pictures.js': true,
  'www/lib/thumbs.js': true,
  'www/lib/stampList.js': true,
  'www/tools/cachefixer.html': true
};


/**
 * Settings for the "prompt" object. This defines the series of questions
 * that the system asks the user when the script is run.
 */
var promptSettings = {
  properties: {
    from: {
      description: 'Your gmail: ',
      pattern: /^[a-zA-Z\s\-\@\.\_]+$/,
      message: 'Must be a valid gmail address',
      required: true
    },
    password: {
      description: 'Your password: ',
      hidden: true,
      required: true
    },
    to: {
      description: 'Send code review to? (ENTER to send to self) ',
    }
  }
};
prompt.message = '';
prompt.delimiter = '';


/**
 * Parses the output of a git show command into a nice side-by-side diff.
 * @param {string} Output of show command.
 * @return {string} The side-by-side HTML.
 */
function convertShowOutputToCodeReview(show) {
  var lines = show.split('\n');
  var result = {};
  result['emailText'] = '';

  var gitFullHash = lines[0].substr(7);
  result['gitShortHash'] = gitFullHash.substr(0,7);
  result['description'] = lines[4];
  result['attachmentName'] = result['gitShortHash'] + '.html';
  var html = ['<body style="padding:50px"><h2>', result['description'], '</h2>'];

  html.push('Click here to <a href="', REVIEW_LINK_URL, '#',
            encodeURIComponent(show), '">review the code.</a>');
  result['attachmentData'] = html.join('');

  return result;
};


/**
 * Given a string that is the output from the git show command, remove any
 * files that are auto-generated by the Bitsbox build tools. This saves
 * us from including files in code reviews that we never actually review.
 */
function removeAutoGeneratedFilesFromShowOutput(showText) {
  var files = showText.split('diff --git a/');

  // The first "file" in the list is really just the header info from the
  // show command, so the newText starts with that.
  var newText = files[0];

  // Then we loop across all of the files. If one of them is in our
  // list of "autogenerated" files, then don't bother keeping the
  // full diff, as it's not useful in codereview.
  for (var i = 1; i < files.length; i++) {
    var file = files[i];
    var fileName = file.substr(0, file.indexOf(' '));
    if (isAutoGeneratedFile[fileName]) {
      console.log(('EXCLUDE: ' + fileName).cyan);
      newText += 'diff --git a/' + fileName + ' b/' + fileName + '\n' +
                 'index 25b3d33..342016f 100644\n' +
                 '--- a/' + fileName + '\n' +
                 '+++ b/' + fileName + '\n' +
                 '@@ -1,397 +1,310\n' +
                 '-OLD GENERATED CODE ...\n'+
                 '+NEW GENERATED CODE ...\n';
    } else {
      console.log(('INCLUDE: ' + fileName).cyan);
      newText += 'diff --git a/' + file;
    }
  }

  return newText;
}


// Get some prompt input and send the email.
prompt.start();
prompt.get(promptSettings, function (err, promptResult) {
  if (err) {
    console.log(('ERROR: ' + err).red);
    return;
  }
  console.log('');
  console.log('RUNNING: git show');

  var tenMegabytes = 10 * 1024 * 1024;
  exec('git show -U9000', { maxBuffer: tenMegabytes }, function (error, stdout, stderr) {
    if (stderr) {
      console.log(('OOPS. There was an error: ' + stderr).red);
      return;
    }

    var showOutput = removeAutoGeneratedFilesFromShowOutput(stdout);
    var codeReviewInfo = convertShowOutputToCodeReview(showOutput);

    // If no "to" email is provided, send to self.
    var toEmail = promptResult.from;
    if (promptResult.to) {
      var toEmail = promptResult.to;
    }
    var toName = toEmail.split('@')[0];

    console.log('SENDING: ' + toEmail);

    var server = emailjs.server.connect({
     user: promptResult.from,
     password: promptResult.password,
     host: 'smtp.gmail.com',
     ssl: true
    });

    // Send the message and get a callback with an error or
    // details of the message that was sent.
    server.send({
       text: 'Hello, ' + toName + ', I\'d like you to do a code review. ' +
             'The attached file has a link for you.\n\n' + 
             codeReviewInfo['emailText'],
       from: promptResult.from, 
       to: toEmail,
       subject: 'Code Review: ' + codeReviewInfo['description'] +
                ' (' + codeReviewInfo['gitShortHash'] + ')',
       attachment: [
        {data: codeReviewInfo['attachmentData'],
         name: codeReviewInfo['attachmentName']}
         //,{data: codeReviewInfo['attachmentData'], alternative:true}
       ]
    }, function(err, message) {
      if (err) {
        console.log(('ERROR: ' + err).red);
        return;
      }
      console.log(('SUCCESS! Your code review has been sent to ' + toEmail).green); 
    });    

  });
});
